import _ from 'lodash';
import AWS from 'aws-sdk';
import Bluebird from 'bluebird';
import path from 'path';

const Lambda = new AWS.Lambda({ apiVersion: '2015-03-31', region: 'us-east-1' });
import { stringify } from 'querystring';
const S3 = new AWS.S3();

Bluebird.promisifyAll(S3);

function invoke(params) {
	return new Bluebird((resolve, reject) => {
		Lambda.invoke(params, (err, success) => {
			if (err) return reject(err);
			resolve(success);
		});
	});
}

if (!process.argv[2]) {
	console.error('You must include the bucket name as a command line argument. :(');
	process.exit(1);
}

const BUCKET_NAME = process.argv[2];

function listAllTheFiles(bucketName) {
	return new Bluebird((resolve, reject) => {
		var items = [];

		const handleResponse = data => {
			items = _.concat(
				items,
				_.filter(data.Contents, item => {
					// Remove anything that was generated by the transcoder.
					return item.StorageClass !== 'REDUCED_REDUNDANCY';
				}));

			if (!data.IsTruncated) {
				return resolve(items);
			}

			S3.listObjectsV2Async({
				Bucket: bucketName,
				MaxKeys: 1000,
				ContinuationToken: data.NextContinuationToken })
				.then(handleResponse)
				.catch(reject);
		};

		S3.listObjectsV2Async({ Bucket: bucketName, MaxKeys: 1000 })
			.then(handleResponse)
			.catch(reject);
	});
}

listAllTheFiles(BUCKET_NAME)
	.then(data => {
		return _.filter(data, item => {
			return /(\.jpg|\.jpeg|\.png)$/i.test(item.Key);
		});
	})
	.then(items => {
		const promises = [];

		items.forEach(item => {
			promises.push(invoke({
				FunctionName: 'makeThumbnail',
				InvocationType: 'RequestResponse',
				Payload: JSON.stringify({
					bucket: BUCKET_NAME,
					key: item.Key
				})
			}));
		});

		return Bluebird.all(promises);
	})
	.then(() => {
		console.log('Thumbnails have been generated.');
	})
	.catch(err => {
		console.error('Oh noes! ', err);
		process.exit(1);
	});
