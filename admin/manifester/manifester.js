import _ from 'lodash';
import AWS from 'aws-sdk';
import Bluebird from 'bluebird';
import path from 'path';

const S3 = new AWS.S3();
Bluebird.promisifyAll(S3);

if (!process.argv[2]) {
	console.error('You must include the bucket name as a command line argument. :(');
	process.exit(1);
}

const BUCKET_NAME = process.argv[2];

function urlify(bucket, key, removeWhitespace) {
	return `https://s3.amazonaws.com/${bucket}/${key.replace(/ /g, removeWhitespace ? '' : '+')}`;
}

function listAllTheFiles(bucketName) {
	return new Bluebird((resolve, reject) => {
		var items = [];

		const handleResponse = data => {
			items = _.concat(
				items,
				_.filter(data.Contents, item => {
					// Remove anything that was generated by the transcoder.
					return item.StorageClass !== 'REDUCED_REDUNDANCY';
				}));

			if (!data.IsTruncated) {
				return resolve(items);
			}

			S3.listObjectsV2Async({
				Bucket: bucketName,
				MaxKeys: 1000,
				ContinuationToken: data.NextContinuationToken })
				.then(handleResponse)
				.catch(reject);
		};

		S3.listObjectsV2Async({ Bucket: bucketName, MaxKeys: 1000 })
			.then(handleResponse)
			.catch(reject);
	});
}

listAllTheFiles(BUCKET_NAME)
	.then(data => {
		const manifest = {};

		for (var i = 0; i < data.length; i++) {
			const parsed = path.parse(data[i].Key);
			const split = parsed.dir.split('/');

			var node = manifest;
			for (var j = 0; j < split.length; j++) {
				if (!node[split[j]]) {
					node[split[j]] = {};
				}
				node = node[split[j]];
			}

			node[parsed.name] = {
				key: data[i].Key,
				url: urlify(BUCKET_NAME, data[i].Key)
			};

			if (/(\.mp4|\.mov)$/i.test(parsed.ext)) {
				node[parsed.name].type = 'video/mp4';
				node[parsed.name].thumbnailUrl = urlify(
					BUCKET_NAME,
					`${parsed.dir}/${parsed.name}-00001.png`);
				node[parsed.name].hlsUrl = urlify(
					BUCKET_NAME,
					`${parsed.dir}/${parsed.name}-hls${parsed.ext}`);
				node[parsed.name].dashUrl = urlify(
					BUCKET_NAME,
					`${parsed.dir}/${parsed.name}-dash.mpd`,
					true);
			}

			else if (/(\.jpg||\.jpeg)$/i.test(parsed.ext)) {
				node[parsed.name].type = 'image/jpeg';
			}

			else {
				throw 'Unknown type: ' + parsed.ext;
			}
		}

		console.log(`module.exports = ${JSON.stringify(manifest, null, 2)};`);
	})
	.catch(err => {
		console.error('Oh noes! Failed!!', err);
	});
