/* eslint "no-console": 0 */

import _ from 'lodash';
import AWS from 'aws-sdk';
import Bluebird from 'bluebird';
import path from 'path';

if (!process.argv[2]) {
	console.error('You must include the bucket name as a command line argument. :(');
	process.exit(1);
}

const S3 = new AWS.S3();
const transcoder = new AWS.ElasticTranscoder({region: 'us-east-1'});

const BUCKET_NAME = process.argv[2];
const PIPELINE_ID = '1533869371429-4c0hs6';
const HLS_PRESET_ID = '1351620000001-200010'; // HLS 2M
const DASH_VIDEO_PRESET_ID = '1351620000001-500030'; // MPEG-Dash 2.4M
const DASH_AUDIO_PRESET_ID = '1351620000001-500060'; // MPEG-Dash Audio 128k

Bluebird.promisifyAll(S3);
Bluebird.promisifyAll(transcoder);

function listAllTheFiles(bucketName) {
	return new Bluebird((resolve, reject) => {
		var items = [];

		const handleResponse = data => {
			items = _.concat(
				items,
				_.filter(data.Contents, item => {
					// Remove anything that was generated by the transcoder.
					return item.StorageClass !== 'REDUCED_REDUNDANCY';
				}));

			if (!data.IsTruncated) {
				return resolve(items);
			}

			S3.listObjectsV2Async({
				Bucket: bucketName,
				MaxKeys: 1000,
				ContinuationToken: data.NextContinuationToken })
				.then(handleResponse)
				.catch(reject);
		};

		S3.listObjectsV2Async({ Bucket: bucketName, MaxKeys: 1000 })
			.then(handleResponse)
			.catch(reject);
	});
}

listAllTheFiles(BUCKET_NAME)
	.then(data => {
		const justVideos = _.filter(data, item => {
			return /(\.MP4$|\.MOV$)/i.test(item.Key);
		});

		const promises = [];

		for (var i = 0; i < justVideos.length; i++) {
			const parsed = path.parse(justVideos[i].Key);

			const hlsParams = {
				PipelineId: PIPELINE_ID,
				Inputs: [
					{
						Key: justVideos[i].Key
					}
				],
				Outputs: [
					{
						Key: `${parsed.dir}/${parsed.name}-hls${parsed.ext}`.replace(/ /g, ''),
						ThumbnailPattern: `${parsed.dir}/${parsed.name}-hls-{count}`.replace(/ /g, ''),
						PresetId: HLS_PRESET_ID,
					}
				]
			};

			const dashParams = {
				PipelineId: PIPELINE_ID,
				Inputs: [
					{
						Key: justVideos[i].Key
					}
				],
				Outputs: [
					{
						Key: `${parsed.dir}/${parsed.name}-dash-vid${parsed.ext}`.replace(/ /g, ''),
						ThumbnailPattern: `${parsed.dir}/${parsed.name}-{count}`.replace(/ /g, ''),
						PresetId: DASH_VIDEO_PRESET_ID,
						SegmentDuration: '5'
					},
					{
						Key: `${parsed.dir}/${parsed.name}-dash-audio${parsed.ext}`.replace(/ /g, ''),
						PresetId: DASH_AUDIO_PRESET_ID,
						SegmentDuration: '5'
					}
				],
				Playlists: [
					{
						Format: 'MPEG-DASH',
						Name: `${parsed.dir}/${parsed.name}-dash`.replace(/ /g, ''),
						OutputKeys: [
							`${parsed.dir}/${parsed.name}-dash-vid${parsed.ext}`.replace(/ /g, ''),
							`${parsed.dir}/${parsed.name}-dash-audio${parsed.ext}`.replace(/ /g, '')
						]
					}
				]
			};

			promises.push(transcoder.createJobAsync(hlsParams));
			promises.push(transcoder.createJobAsync(dashParams));
		}

		return Bluebird.all(promises);
	})
	.then(() => {
		console.log('Woohoo! Check S3.');
	})
	.catch(err => {
		console.error('Error trying to enumerate objects:', err);	
	});
